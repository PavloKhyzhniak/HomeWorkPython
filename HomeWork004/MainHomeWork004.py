
import functionsTask1Plane
import functionsTask2Animal
import functionsTask3Figure



def main():
    print(f'{__name__}: начало работы\n')


    Task_ClassWork004()
    while(1):
        Task_HomeWork004()
        choose = int(input("""
\033[0m \033[34;47mВыберите пункт:\033[0m """))
        if choose == 1:
            pass
            functionsTask1Plane.Task_Task1()
            functionsTask1Plane.Run_Task1()

        elif choose == 2:
            pass
            functionsTask2Animal.Task_Task2()
            functionsTask2Animal.Run_Task2()

        elif choose == 3:
            pass
            functionsTask3Figure.Task_Task3()
            functionsTask3Figure.Run_Task3()
    
        elif choose == 4:
            pass
    
        elif choose == 0:
            # from MainHomeWork import main
            # main()
            break


def Task_HomeWork004():
    print('''\t\033[0m \033[34;47mMENU\033[0m
    1 - Task1.
    2 - Task2.
    3 - Task3.
    0 - Exit from Programm
    ''')

def Task_ClassWork004():
    print('''\t\033[0m \033[34;47mТеоретическая часть
\033[0m
•	Понятие о классах в Python – объявление классов, свойств классов
•	Понятие о ссылке на текущий объект - self
•	Методы классов
•	Некоторые специальные методы классов: конструктор (__init__()), деструктор (__del__()), получение строкового представления объекта класса (__str__())
•	Создание объектов классов
•	Вызов методов классов 
•	Доступ к свойствам классов по чтению и записи
•	Удаление объектов классов
•	Понятие об инкапсуляции в классах Python
•	Ограничение области видимости атрибутов класса
•	Создание геттеров (аксессоров) и сеттеров (мутаторов) для атрибутов класса
•	Создание свойств для атрибутов класса
•	Введение в наследование в Python
•	Синтаксис задания наследования в объявлении класса Python
•	Понятие о функции super() – доступ к базовому классу
•	Доступ к полям и свойствам базового класса из производного класса
•	Понятие о полиморфизме, переопределение методов базового класса
•	Статические методы класса, аннотация @staticmethod, синтаксис вызова метода
•	Статический атрибут класса, синтаксис обращения к атрибуту
•	Сортировка списка объектов, методы sort(), sorted() – использование параметра key для задания поля сортировки
•	Понятие о лямбда-функциях для задания полей сортировки


\033[0m \033[34;47mПрактическая часть
\033[0m
\tРазработайте консольное приложение Python в составе главного модуля main.py, модуля utils.py со вспомогательными функциями, модуля app.py и дополнительных модулей для функций решения задач, классов.
\tИспользуйте исключения. Реализуйте простое меню для выбора решаемой задачи, пункта в решаемой задачи.
''')



# исполняемый код для обеспечения запуска функции main()
# модулю, который стартует, всегда присваивается имя '__main__'
if __name__ == '__main__':
    # from MainHomeWork import main
    main()
# end if
